plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.diffplug.spotless' version '6.19.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'

    implementation 'com.zaxxer:HikariCP:4.0.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    //kafka
    implementation 'org.springframework.kafka:spring-kafka'

     // Spring Data Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    
    // Jedis (Redis client)
    implementation 'redis.clients:jedis'

    implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

}

tasks.named('test') {
	useJUnitPlatform()
}

spotless {
    java {
        // Use the Google Java format
        googleJavaFormat()
        
        // Or use a specific version of Google Java format
        // googleJavaFormat('1.15.0')

        // Remove unused imports
        removeUnusedImports()

        // Sort imports
        importOrder 'java', 'javax', 'org', 'com', ''

        // Apply custom rules
        custom 'Lambda fix', { it.replace('} )', '})').replace('} ,', '},') }

        // Enforce newline at end of file
        endWithNewline()

        // Add license header
        licenseHeader '/* (C)$YEAR */'
    }
}